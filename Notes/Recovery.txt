#Before long settings prompt
def open_settings(self):
        global Output_Folder_Path
        global Project_Order_By
        if not self.settings_open:
            # Hide main UI
            self.left_frame.pack_forget()
            self.right_frame.pack_forget()
            self.content_frame.pack_forget()
            self.toggle_button_Close_Folders.pack_forget()
            self.sync_button.pack_forget()

            # Change heading
            self.heading.config(text="Settings")

            # Create the settings frame
            self.settings_frame = ttk.Frame(self.root)
            self.settings_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=0)

            # Sub General Section Header
            self.general_header = ttk.Label(
                self.settings_frame, text="General", font=("Segoe UI", 16, "bold"))
            self.general_header.pack(anchor="w", padx=10, pady=(10, 5))
            
            # Output Folder Picker
            output_folder_frame = ttk.Frame(self.settings_frame)
            output_folder_frame.pack(fill=tk.X, pady=0)

            self.output_folder_label = ttk.Label(
                output_folder_frame, font=("Segoe UI", 14)
            )
            self.output_folder_label.pack(side=tk.LEFT, padx=(0, 0), pady=5)

            self.output_folder_label = ttk.Label(
                output_folder_frame, text="Output Folder", font=("Segoe UI", 14))
            self.output_folder_label.pack(side=tk.LEFT, padx=(0, 0), pady=5)

            self.output_folder_entry = ttk.Entry(output_folder_frame)
            self.output_folder_entry.pack(
                side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))
            self.output_folder_entry.insert(0, Output_Folder_Path)

            self.browse_button = ttk.Button(
                output_folder_frame,
                text="Browse",
                command=self.browse_output_folder,
                bootstyle="info"
            )
            self.browse_button.pack(side=tk.LEFT)

            # âœ¨ Add a new label underneath
            self.output_folder_info_label = ttk.Label(
                self.settings_frame,
                text="This is where your songs will be exported to.",
                font=("Segoe UI", 14),  
                foreground="black"      
            )
            self.output_folder_info_label.pack(anchor="w", padx=5, pady=(2, 10))

            # Project Order selection
            order_frame = ttk.Frame(self.settings_frame)
            order_frame.pack(fill=tk.X, pady=0)

            self.order_label = ttk.Label(
                order_frame, text="Project Order:", font=("Segoe UI", 14))
            self.order_label.pack(side=tk.LEFT, padx=(0, 5))

            self.order_var = tk.StringVar(value=Project_Order_By)
            self.order_combobox = ttk.Combobox(
                order_frame,
                textvariable=self.order_var,
                values=["date", "name"],
                state="readonly",
                width=10,
                style="CustomCombobox.TCombobox"
            )
            self.order_combobox.pack(side=tk.LEFT)
            self.order_combobox.configure(font=("Segoe UI", 14))

            # Sub General Section Header
            self.general_header = ttk.Label(
                self.settings_frame, text="Advanced", font=("Segoe UI", 16, "bold"))
            self.general_header.pack(anchor="w", padx=10, pady=(10, 5))


             # Sub General Section Header
            self.general_header = ttk.Label(
                self.settings_frame, text="About", font=("Segoe UI", 16, "bold"))
            self.general_header.pack(anchor="w", padx=10, pady=(10, 5))

            # Show close button and update settings button
            self.close_button.pack(side=tk.RIGHT, padx=(0, 10))
            self.settings_button.config(text="Save Settings", image='')
            self.settings_open = True

        else:
            # Save output path
            new_path = self.output_folder_entry.get().strip()
            if not os.path.isdir(new_path):
                messagebox.showerror(
                    "Error", "The specified directory does not exist.")
                return
            Output_Folder_Path = new_path

            # Save project order
            Project_Order_By = self.order_var.get()

            # Destroy settings UI
            self.settings_frame.destroy()
            self.settings_open = False

            self.restore_header_and_ui()
